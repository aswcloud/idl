//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: loginToken.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `V1_TokenClient`, then call methods of this protocol to make API calls.
internal protocol V1_TokenClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: V1_TokenClientInterceptorFactoryProtocol? { get }

  func createRefreshToken(
    _ request: V1_UserLoginMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_UserLoginMessage, V1_RefreshToken>

  func updatehRefreshToken(
    _ request: V1_Uuid,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_Uuid, V1_RefreshToken>

  func deleteRefreshToken(
    _ request: V1_Uuid,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_Uuid, V1_LoginTokenMessage>

  func makeAccessToken(
    _ request: V1_Uuid,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_Uuid, V1_AccessToken>
}

extension V1_TokenClientProtocol {
  internal var serviceName: String {
    return "v1.Token"
  }

  /// Unary call to CreateRefreshToken
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRefreshToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRefreshToken(
    _ request: V1_UserLoginMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_UserLoginMessage, V1_RefreshToken> {
    return self.makeUnaryCall(
      path: "/v1.Token/CreateRefreshToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRefreshTokenInterceptors() ?? []
    )
  }

  /// Header Check! Token!
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdatehRefreshToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updatehRefreshToken(
    _ request: V1_Uuid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_Uuid, V1_RefreshToken> {
    return self.makeUnaryCall(
      path: "/v1.Token/UpdatehRefreshToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdatehRefreshTokenInterceptors() ?? []
    )
  }

  /// Unary call to DeleteRefreshToken
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteRefreshToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteRefreshToken(
    _ request: V1_Uuid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_Uuid, V1_LoginTokenMessage> {
    return self.makeUnaryCall(
      path: "/v1.Token/DeleteRefreshToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteRefreshTokenInterceptors() ?? []
    )
  }

  /// Unary call to MakeAccessToken
  ///
  /// - Parameters:
  ///   - request: Request to send to MakeAccessToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func makeAccessToken(
    _ request: V1_Uuid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_Uuid, V1_AccessToken> {
    return self.makeUnaryCall(
      path: "/v1.Token/MakeAccessToken",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMakeAccessTokenInterceptors() ?? []
    )
  }
}

internal protocol V1_TokenClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createRefreshToken'.
  func makeCreateRefreshTokenInterceptors() -> [ClientInterceptor<V1_UserLoginMessage, V1_RefreshToken>]

  /// - Returns: Interceptors to use when invoking 'updatehRefreshToken'.
  func makeUpdatehRefreshTokenInterceptors() -> [ClientInterceptor<V1_Uuid, V1_RefreshToken>]

  /// - Returns: Interceptors to use when invoking 'deleteRefreshToken'.
  func makeDeleteRefreshTokenInterceptors() -> [ClientInterceptor<V1_Uuid, V1_LoginTokenMessage>]

  /// - Returns: Interceptors to use when invoking 'makeAccessToken'.
  func makeMakeAccessTokenInterceptors() -> [ClientInterceptor<V1_Uuid, V1_AccessToken>]
}

internal final class V1_TokenClient: V1_TokenClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: V1_TokenClientInterceptorFactoryProtocol?

  /// Creates a client for the v1.Token service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: V1_TokenClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol V1_TokenProvider: CallHandlerProvider {
  var interceptors: V1_TokenServerInterceptorFactoryProtocol? { get }

  func createRefreshToken(request: V1_UserLoginMessage, context: StatusOnlyCallContext) -> EventLoopFuture<V1_RefreshToken>

  /// Header Check! Token!
  func updatehRefreshToken(request: V1_Uuid, context: StatusOnlyCallContext) -> EventLoopFuture<V1_RefreshToken>

  func deleteRefreshToken(request: V1_Uuid, context: StatusOnlyCallContext) -> EventLoopFuture<V1_LoginTokenMessage>

  func makeAccessToken(request: V1_Uuid, context: StatusOnlyCallContext) -> EventLoopFuture<V1_AccessToken>
}

extension V1_TokenProvider {
  internal var serviceName: Substring { return "v1.Token" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateRefreshToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_UserLoginMessage>(),
        responseSerializer: ProtobufSerializer<V1_RefreshToken>(),
        interceptors: self.interceptors?.makeCreateRefreshTokenInterceptors() ?? [],
        userFunction: self.createRefreshToken(request:context:)
      )

    case "UpdatehRefreshToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_Uuid>(),
        responseSerializer: ProtobufSerializer<V1_RefreshToken>(),
        interceptors: self.interceptors?.makeUpdatehRefreshTokenInterceptors() ?? [],
        userFunction: self.updatehRefreshToken(request:context:)
      )

    case "DeleteRefreshToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_Uuid>(),
        responseSerializer: ProtobufSerializer<V1_LoginTokenMessage>(),
        interceptors: self.interceptors?.makeDeleteRefreshTokenInterceptors() ?? [],
        userFunction: self.deleteRefreshToken(request:context:)
      )

    case "MakeAccessToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_Uuid>(),
        responseSerializer: ProtobufSerializer<V1_AccessToken>(),
        interceptors: self.interceptors?.makeMakeAccessTokenInterceptors() ?? [],
        userFunction: self.makeAccessToken(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol V1_TokenServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createRefreshToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateRefreshTokenInterceptors() -> [ServerInterceptor<V1_UserLoginMessage, V1_RefreshToken>]

  /// - Returns: Interceptors to use when handling 'updatehRefreshToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdatehRefreshTokenInterceptors() -> [ServerInterceptor<V1_Uuid, V1_RefreshToken>]

  /// - Returns: Interceptors to use when handling 'deleteRefreshToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteRefreshTokenInterceptors() -> [ServerInterceptor<V1_Uuid, V1_LoginTokenMessage>]

  /// - Returns: Interceptors to use when handling 'makeAccessToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMakeAccessTokenInterceptors() -> [ServerInterceptor<V1_Uuid, V1_AccessToken>]
}
