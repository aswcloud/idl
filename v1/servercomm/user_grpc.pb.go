// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servercomm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserAccountClient is the client API for UserAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAccountClient interface {
	CreateUser(ctx context.Context, in *MakeUser, opts ...grpc.CallOption) (*Result, error)
	ReadUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UserDetail, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error)
	DeleteUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*Result, error)
}

type userAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAccountClient(cc grpc.ClientConnInterface) UserAccountClient {
	return &userAccountClient{cc}
}

func (c *userAccountClient) CreateUser(ctx context.Context, in *MakeUser, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.UserAccount/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountClient) ReadUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*UserDetail, error) {
	out := new(UserDetail)
	err := c.cc.Invoke(ctx, "/v1.UserAccount/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.UserAccount/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAccountClient) DeleteUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.UserAccount/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAccountServer is the server API for UserAccount service.
// All implementations must embed UnimplementedUserAccountServer
// for forward compatibility
type UserAccountServer interface {
	CreateUser(context.Context, *MakeUser) (*Result, error)
	ReadUser(context.Context, *Uuid) (*UserDetail, error)
	UpdateUser(context.Context, *User) (*Result, error)
	DeleteUser(context.Context, *Uuid) (*Result, error)
	mustEmbedUnimplementedUserAccountServer()
}

// UnimplementedUserAccountServer must be embedded to have forward compatible implementations.
type UnimplementedUserAccountServer struct {
}

func (UnimplementedUserAccountServer) CreateUser(context.Context, *MakeUser) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserAccountServer) ReadUser(context.Context, *Uuid) (*UserDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedUserAccountServer) UpdateUser(context.Context, *User) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserAccountServer) DeleteUser(context.Context, *Uuid) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserAccountServer) mustEmbedUnimplementedUserAccountServer() {}

// UnsafeUserAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAccountServer will
// result in compilation errors.
type UnsafeUserAccountServer interface {
	mustEmbedUnimplementedUserAccountServer()
}

func RegisterUserAccountServer(s grpc.ServiceRegistrar, srv UserAccountServer) {
	s.RegisterService(&UserAccount_ServiceDesc, srv)
}

func _UserAccount_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserAccount/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).CreateUser(ctx, req.(*MakeUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccount_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserAccount/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).ReadUser(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccount_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserAccount/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAccount_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAccountServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserAccount/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAccountServer).DeleteUser(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAccount_ServiceDesc is the grpc.ServiceDesc for UserAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserAccount",
	HandlerType: (*UserAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserAccount_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _UserAccount_ReadUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserAccount_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserAccount_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

// OrganizationAccountClient is the client API for OrganizationAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationAccountClient interface {
	CreateOrganization(ctx context.Context, in *MakeOrganization, opts ...grpc.CallOption) (*Result, error)
	ReadOrganization(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*OrganizationDetail, error)
	UpdateOrganization(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*Result, error)
	DeleteOrganization(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*Result, error)
	AppendUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*OrganizationDetail, error)
}

type organizationAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationAccountClient(cc grpc.ClientConnInterface) OrganizationAccountClient {
	return &organizationAccountClient{cc}
}

func (c *organizationAccountClient) CreateOrganization(ctx context.Context, in *MakeOrganization, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.OrganizationAccount/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccountClient) ReadOrganization(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*OrganizationDetail, error) {
	out := new(OrganizationDetail)
	err := c.cc.Invoke(ctx, "/v1.OrganizationAccount/ReadOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccountClient) UpdateOrganization(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.OrganizationAccount/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccountClient) DeleteOrganization(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.OrganizationAccount/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationAccountClient) AppendUser(ctx context.Context, in *Uuid, opts ...grpc.CallOption) (*OrganizationDetail, error) {
	out := new(OrganizationDetail)
	err := c.cc.Invoke(ctx, "/v1.OrganizationAccount/AppendUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationAccountServer is the server API for OrganizationAccount service.
// All implementations must embed UnimplementedOrganizationAccountServer
// for forward compatibility
type OrganizationAccountServer interface {
	CreateOrganization(context.Context, *MakeOrganization) (*Result, error)
	ReadOrganization(context.Context, *Uuid) (*OrganizationDetail, error)
	UpdateOrganization(context.Context, *Uuid) (*Result, error)
	DeleteOrganization(context.Context, *Uuid) (*Result, error)
	AppendUser(context.Context, *Uuid) (*OrganizationDetail, error)
	mustEmbedUnimplementedOrganizationAccountServer()
}

// UnimplementedOrganizationAccountServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationAccountServer struct {
}

func (UnimplementedOrganizationAccountServer) CreateOrganization(context.Context, *MakeOrganization) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedOrganizationAccountServer) ReadOrganization(context.Context, *Uuid) (*OrganizationDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrganization not implemented")
}
func (UnimplementedOrganizationAccountServer) UpdateOrganization(context.Context, *Uuid) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedOrganizationAccountServer) DeleteOrganization(context.Context, *Uuid) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedOrganizationAccountServer) AppendUser(context.Context, *Uuid) (*OrganizationDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendUser not implemented")
}
func (UnimplementedOrganizationAccountServer) mustEmbedUnimplementedOrganizationAccountServer() {}

// UnsafeOrganizationAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationAccountServer will
// result in compilation errors.
type UnsafeOrganizationAccountServer interface {
	mustEmbedUnimplementedOrganizationAccountServer()
}

func RegisterOrganizationAccountServer(s grpc.ServiceRegistrar, srv OrganizationAccountServer) {
	s.RegisterService(&OrganizationAccount_ServiceDesc, srv)
}

func _OrganizationAccount_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeOrganization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccountServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationAccount/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccountServer).CreateOrganization(ctx, req.(*MakeOrganization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccount_ReadOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccountServer).ReadOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationAccount/ReadOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccountServer).ReadOrganization(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccount_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccountServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationAccount/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccountServer).UpdateOrganization(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccount_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccountServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationAccount/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccountServer).DeleteOrganization(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationAccount_AppendUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Uuid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationAccountServer).AppendUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationAccount/AppendUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationAccountServer).AppendUser(ctx, req.(*Uuid))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationAccount_ServiceDesc is the grpc.ServiceDesc for OrganizationAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OrganizationAccount",
	HandlerType: (*OrganizationAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationAccount_CreateOrganization_Handler,
		},
		{
			MethodName: "ReadOrganization",
			Handler:    _OrganizationAccount_ReadOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationAccount_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationAccount_DeleteOrganization_Handler,
		},
		{
			MethodName: "AppendUser",
			Handler:    _OrganizationAccount_AppendUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
