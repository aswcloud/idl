// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package servercomm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KubernetesClient is the client API for Kubernetes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KubernetesClient interface {
	// Needs, Authorization
	CreateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Result, error)
	// Needs, Authorization
	ReadNamespace(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListNamespace, error)
	// Needs, Authorization
	UpdateNamespace(ctx context.Context, in *UpdateNamespace, opts ...grpc.CallOption) (*Result, error)
	// Needs, Authorization
	DeleteNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Result, error)
	// Needs, Authorization
	CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Result, error)
	// Needs, Authorization
	ReadDeployment(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*ListDeployment, error)
	// Needs, Authorization
	UpdateDeployment(ctx context.Context, in *UpdateDeployment, opts ...grpc.CallOption) (*Result, error)
	// Needs, Authorization
	DeleteDeployment(ctx context.Context, in *DeleteDeployment, opts ...grpc.CallOption) (*Result, error)
}

type kubernetesClient struct {
	cc grpc.ClientConnInterface
}

func NewKubernetesClient(cc grpc.ClientConnInterface) KubernetesClient {
	return &kubernetesClient{cc}
}

func (c *kubernetesClient) CreateNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) ReadNamespace(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ListNamespace, error) {
	out := new(ListNamespace)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/ReadNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) UpdateNamespace(ctx context.Context, in *UpdateNamespace, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) DeleteNamespace(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) CreateDeployment(ctx context.Context, in *Deployment, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) ReadDeployment(ctx context.Context, in *Namespace, opts ...grpc.CallOption) (*ListDeployment, error) {
	out := new(ListDeployment)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/ReadDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) UpdateDeployment(ctx context.Context, in *UpdateDeployment, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/UpdateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubernetesClient) DeleteDeployment(ctx context.Context, in *DeleteDeployment, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/v1.Kubernetes/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KubernetesServer is the server API for Kubernetes service.
// All implementations must embed UnimplementedKubernetesServer
// for forward compatibility
type KubernetesServer interface {
	// Needs, Authorization
	CreateNamespace(context.Context, *Namespace) (*Result, error)
	// Needs, Authorization
	ReadNamespace(context.Context, *Void) (*ListNamespace, error)
	// Needs, Authorization
	UpdateNamespace(context.Context, *UpdateNamespace) (*Result, error)
	// Needs, Authorization
	DeleteNamespace(context.Context, *Namespace) (*Result, error)
	// Needs, Authorization
	CreateDeployment(context.Context, *Deployment) (*Result, error)
	// Needs, Authorization
	ReadDeployment(context.Context, *Namespace) (*ListDeployment, error)
	// Needs, Authorization
	UpdateDeployment(context.Context, *UpdateDeployment) (*Result, error)
	// Needs, Authorization
	DeleteDeployment(context.Context, *DeleteDeployment) (*Result, error)
	mustEmbedUnimplementedKubernetesServer()
}

// UnimplementedKubernetesServer must be embedded to have forward compatible implementations.
type UnimplementedKubernetesServer struct {
}

func (UnimplementedKubernetesServer) CreateNamespace(context.Context, *Namespace) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedKubernetesServer) ReadNamespace(context.Context, *Void) (*ListNamespace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNamespace not implemented")
}
func (UnimplementedKubernetesServer) UpdateNamespace(context.Context, *UpdateNamespace) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedKubernetesServer) DeleteNamespace(context.Context, *Namespace) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedKubernetesServer) CreateDeployment(context.Context, *Deployment) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedKubernetesServer) ReadDeployment(context.Context, *Namespace) (*ListDeployment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeployment not implemented")
}
func (UnimplementedKubernetesServer) UpdateDeployment(context.Context, *UpdateDeployment) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedKubernetesServer) DeleteDeployment(context.Context, *DeleteDeployment) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedKubernetesServer) mustEmbedUnimplementedKubernetesServer() {}

// UnsafeKubernetesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KubernetesServer will
// result in compilation errors.
type UnsafeKubernetesServer interface {
	mustEmbedUnimplementedKubernetesServer()
}

func RegisterKubernetesServer(s grpc.ServiceRegistrar, srv KubernetesServer) {
	s.RegisterService(&Kubernetes_ServiceDesc, srv)
}

func _Kubernetes_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).CreateNamespace(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_ReadNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).ReadNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/ReadNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).ReadNamespace(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).UpdateNamespace(ctx, req.(*UpdateNamespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).DeleteNamespace(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Deployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).CreateDeployment(ctx, req.(*Deployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_ReadDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Namespace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).ReadDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/ReadDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).ReadDeployment(ctx, req.(*Namespace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).UpdateDeployment(ctx, req.(*UpdateDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kubernetes_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeployment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubernetesServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Kubernetes/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubernetesServer).DeleteDeployment(ctx, req.(*DeleteDeployment))
	}
	return interceptor(ctx, in, info, handler)
}

// Kubernetes_ServiceDesc is the grpc.ServiceDesc for Kubernetes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kubernetes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Kubernetes",
	HandlerType: (*KubernetesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Kubernetes_CreateNamespace_Handler,
		},
		{
			MethodName: "ReadNamespace",
			Handler:    _Kubernetes_ReadNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _Kubernetes_UpdateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Kubernetes_DeleteNamespace_Handler,
		},
		{
			MethodName: "CreateDeployment",
			Handler:    _Kubernetes_CreateDeployment_Handler,
		},
		{
			MethodName: "ReadDeployment",
			Handler:    _Kubernetes_ReadDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Kubernetes_UpdateDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Kubernetes_DeleteDeployment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kubernetes.proto",
}
