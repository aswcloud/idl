// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kubernetes

import (
	context "context"
	v1 "github.com/aswcloud/gen/go/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamespaceClient is the client API for Namespace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamespaceClient interface {
	CreateNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	ReadNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	UpdateNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	DeleteNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
}

type namespaceClient struct {
	cc grpc.ClientConnInterface
}

func NewNamespaceClient(cc grpc.ClientConnInterface) NamespaceClient {
	return &namespaceClient{cc}
}

func (c *namespaceClient) CreateNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Namespace/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) ReadNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Namespace/ReadNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) UpdateNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Namespace/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namespaceClient) DeleteNamespace(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Namespace/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamespaceServer is the server API for Namespace service.
// All implementations must embed UnimplementedNamespaceServer
// for forward compatibility
type NamespaceServer interface {
	CreateNamespace(context.Context, *v1.Void) (*v1.Void, error)
	ReadNamespace(context.Context, *v1.Void) (*v1.Void, error)
	UpdateNamespace(context.Context, *v1.Void) (*v1.Void, error)
	DeleteNamespace(context.Context, *v1.Void) (*v1.Void, error)
	mustEmbedUnimplementedNamespaceServer()
}

// UnimplementedNamespaceServer must be embedded to have forward compatible implementations.
type UnimplementedNamespaceServer struct {
}

func (UnimplementedNamespaceServer) CreateNamespace(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedNamespaceServer) ReadNamespace(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNamespace not implemented")
}
func (UnimplementedNamespaceServer) UpdateNamespace(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespace not implemented")
}
func (UnimplementedNamespaceServer) DeleteNamespace(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedNamespaceServer) mustEmbedUnimplementedNamespaceServer() {}

// UnsafeNamespaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamespaceServer will
// result in compilation errors.
type UnsafeNamespaceServer interface {
	mustEmbedUnimplementedNamespaceServer()
}

func RegisterNamespaceServer(s grpc.ServiceRegistrar, srv NamespaceServer) {
	s.RegisterService(&Namespace_ServiceDesc, srv)
}

func _Namespace_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Namespace/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).CreateNamespace(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_ReadNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).ReadNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Namespace/ReadNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).ReadNamespace(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Namespace/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).UpdateNamespace(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namespace_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamespaceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Namespace/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamespaceServer).DeleteNamespace(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Namespace_ServiceDesc is the grpc.ServiceDesc for Namespace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namespace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Namespace",
	HandlerType: (*NamespaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNamespace",
			Handler:    _Namespace_CreateNamespace_Handler,
		},
		{
			MethodName: "ReadNamespace",
			Handler:    _Namespace_ReadNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _Namespace_UpdateNamespace_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _Namespace_DeleteNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverk8s.proto",
}

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CreateService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	ReadService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	UpdateService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	DeleteService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Service/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ReadService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Service/ReadService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Service/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteService(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Service/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CreateService(context.Context, *v1.Void) (*v1.Void, error)
	ReadService(context.Context, *v1.Void) (*v1.Void, error)
	UpdateService(context.Context, *v1.Void) (*v1.Void, error)
	DeleteService(context.Context, *v1.Void) (*v1.Void, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CreateService(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedServiceServer) ReadService(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadService not implemented")
}
func (UnimplementedServiceServer) UpdateService(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedServiceServer) DeleteService(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateService(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ReadService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ReadService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/ReadService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ReadService(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateService(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Service/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteService(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Service_CreateService_Handler,
		},
		{
			MethodName: "ReadService",
			Handler:    _Service_ReadService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _Service_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Service_DeleteService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverk8s.proto",
}

// DeploymentClient is the client API for Deployment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeploymentClient interface {
	CreateDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	ReadDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	UpdateDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	DeleteDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	CreatePersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	ReadPersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	UpdatePersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
	DeletePersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error)
}

type deploymentClient struct {
	cc grpc.ClientConnInterface
}

func NewDeploymentClient(cc grpc.ClientConnInterface) DeploymentClient {
	return &deploymentClient{cc}
}

func (c *deploymentClient) CreateDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/CreateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ReadDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/ReadDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) UpdateDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/UpdateDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeleteDeployment(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) CreatePersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/CreatePersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) ReadPersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/ReadPersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) UpdatePersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/UpdatePersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentClient) DeletePersistentVolumeClaim(ctx context.Context, in *v1.Void, opts ...grpc.CallOption) (*v1.Void, error) {
	out := new(v1.Void)
	err := c.cc.Invoke(ctx, "/v1.Deployment/DeletePersistentVolumeClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeploymentServer is the server API for Deployment service.
// All implementations must embed UnimplementedDeploymentServer
// for forward compatibility
type DeploymentServer interface {
	CreateDeployment(context.Context, *v1.Void) (*v1.Void, error)
	ReadDeployment(context.Context, *v1.Void) (*v1.Void, error)
	UpdateDeployment(context.Context, *v1.Void) (*v1.Void, error)
	DeleteDeployment(context.Context, *v1.Void) (*v1.Void, error)
	CreatePersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error)
	ReadPersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error)
	UpdatePersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error)
	DeletePersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error)
	mustEmbedUnimplementedDeploymentServer()
}

// UnimplementedDeploymentServer must be embedded to have forward compatible implementations.
type UnimplementedDeploymentServer struct {
}

func (UnimplementedDeploymentServer) CreateDeployment(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeployment not implemented")
}
func (UnimplementedDeploymentServer) ReadDeployment(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeployment not implemented")
}
func (UnimplementedDeploymentServer) UpdateDeployment(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeployment not implemented")
}
func (UnimplementedDeploymentServer) DeleteDeployment(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (UnimplementedDeploymentServer) CreatePersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersistentVolumeClaim not implemented")
}
func (UnimplementedDeploymentServer) ReadPersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPersistentVolumeClaim not implemented")
}
func (UnimplementedDeploymentServer) UpdatePersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersistentVolumeClaim not implemented")
}
func (UnimplementedDeploymentServer) DeletePersistentVolumeClaim(context.Context, *v1.Void) (*v1.Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersistentVolumeClaim not implemented")
}
func (UnimplementedDeploymentServer) mustEmbedUnimplementedDeploymentServer() {}

// UnsafeDeploymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeploymentServer will
// result in compilation errors.
type UnsafeDeploymentServer interface {
	mustEmbedUnimplementedDeploymentServer()
}

func RegisterDeploymentServer(s grpc.ServiceRegistrar, srv DeploymentServer) {
	s.RegisterService(&Deployment_ServiceDesc, srv)
}

func _Deployment_CreateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CreateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/CreateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CreateDeployment(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ReadDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ReadDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/ReadDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ReadDeployment(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_UpdateDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).UpdateDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/UpdateDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).UpdateDeployment(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeleteDeployment(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_CreatePersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).CreatePersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/CreatePersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).CreatePersistentVolumeClaim(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_ReadPersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).ReadPersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/ReadPersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).ReadPersistentVolumeClaim(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_UpdatePersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).UpdatePersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/UpdatePersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).UpdatePersistentVolumeClaim(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployment_DeletePersistentVolumeClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentServer).DeletePersistentVolumeClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.Deployment/DeletePersistentVolumeClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentServer).DeletePersistentVolumeClaim(ctx, req.(*v1.Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployment_ServiceDesc is the grpc.ServiceDesc for Deployment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.Deployment",
	HandlerType: (*DeploymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeployment",
			Handler:    _Deployment_CreateDeployment_Handler,
		},
		{
			MethodName: "ReadDeployment",
			Handler:    _Deployment_ReadDeployment_Handler,
		},
		{
			MethodName: "UpdateDeployment",
			Handler:    _Deployment_UpdateDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Deployment_DeleteDeployment_Handler,
		},
		{
			MethodName: "CreatePersistentVolumeClaim",
			Handler:    _Deployment_CreatePersistentVolumeClaim_Handler,
		},
		{
			MethodName: "ReadPersistentVolumeClaim",
			Handler:    _Deployment_ReadPersistentVolumeClaim_Handler,
		},
		{
			MethodName: "UpdatePersistentVolumeClaim",
			Handler:    _Deployment_UpdatePersistentVolumeClaim_Handler,
		},
		{
			MethodName: "DeletePersistentVolumeClaim",
			Handler:    _Deployment_DeletePersistentVolumeClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverk8s.proto",
}

// PersistentVolumeClaimClient is the client API for PersistentVolumeClaim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersistentVolumeClaimClient interface {
}

type persistentVolumeClaimClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistentVolumeClaimClient(cc grpc.ClientConnInterface) PersistentVolumeClaimClient {
	return &persistentVolumeClaimClient{cc}
}

// PersistentVolumeClaimServer is the server API for PersistentVolumeClaim service.
// All implementations must embed UnimplementedPersistentVolumeClaimServer
// for forward compatibility
type PersistentVolumeClaimServer interface {
	mustEmbedUnimplementedPersistentVolumeClaimServer()
}

// UnimplementedPersistentVolumeClaimServer must be embedded to have forward compatible implementations.
type UnimplementedPersistentVolumeClaimServer struct {
}

func (UnimplementedPersistentVolumeClaimServer) mustEmbedUnimplementedPersistentVolumeClaimServer() {}

// UnsafePersistentVolumeClaimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistentVolumeClaimServer will
// result in compilation errors.
type UnsafePersistentVolumeClaimServer interface {
	mustEmbedUnimplementedPersistentVolumeClaimServer()
}

func RegisterPersistentVolumeClaimServer(s grpc.ServiceRegistrar, srv PersistentVolumeClaimServer) {
	s.RegisterService(&PersistentVolumeClaim_ServiceDesc, srv)
}

// PersistentVolumeClaim_ServiceDesc is the grpc.ServiceDesc for PersistentVolumeClaim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistentVolumeClaim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PersistentVolumeClaim",
	HandlerType: (*PersistentVolumeClaimServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "serverk8s.proto",
}
