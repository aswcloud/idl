//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kubernetes.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `V1_KubernetesClient`, then call methods of this protocol to make API calls.
public protocol V1_KubernetesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: V1_KubernetesClientInterceptorFactoryProtocol? { get }

  func createNamespace(
    _ request: V1_namespace,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_namespace, V1_Result>

  func readNamespace(
    _ request: V1_Void,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_Void, V1_list_namespace>

  func deleteNamespace(
    _ request: V1_namespace,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_namespace, V1_Result>

  func createDeployment(
    _ request: V1_deployment,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_deployment, V1_Result>

  func readDeployment(
    _ request: V1_namespace,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_namespace, V1_list_deployment>

  func updateDeployment(
    _ request: V1_update_deployment,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_update_deployment, V1_Result>

  func deleteDeployment(
    _ request: V1_delete_deployment,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_delete_deployment, V1_Result>
}

extension V1_KubernetesClientProtocol {
  public var serviceName: String {
    return "v1.Kubernetes"
  }

  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateNamespace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createNamespace(
    _ request: V1_namespace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_namespace, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/CreateNamespace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateNamespaceInterceptors() ?? []
    )
  }

  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadNamespace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func readNamespace(
    _ request: V1_Void,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_Void, V1_list_namespace> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/ReadNamespace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadNamespaceInterceptors() ?? []
    )
  }

  /// Needs, Authorization
  /// rpc UpdateNamespace(update_namespace) returns (Result);
  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteNamespace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteNamespace(
    _ request: V1_namespace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_namespace, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/DeleteNamespace",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteNamespaceInterceptors() ?? []
    )
  }

  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDeployment(
    _ request: V1_deployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_deployment, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/CreateDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? []
    )
  }

  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func readDeployment(
    _ request: V1_namespace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_namespace, V1_list_deployment> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/ReadDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadDeploymentInterceptors() ?? []
    )
  }

  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDeployment(
    _ request: V1_update_deployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_update_deployment, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/UpdateDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? []
    )
  }

  /// Needs, Authorization
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDeployment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDeployment(
    _ request: V1_delete_deployment,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_delete_deployment, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.Kubernetes/DeleteDeployment",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteDeploymentInterceptors() ?? []
    )
  }
}

public protocol V1_KubernetesClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createNamespace'.
  func makeCreateNamespaceInterceptors() -> [ClientInterceptor<V1_namespace, V1_Result>]

  /// - Returns: Interceptors to use when invoking 'readNamespace'.
  func makeReadNamespaceInterceptors() -> [ClientInterceptor<V1_Void, V1_list_namespace>]

  /// - Returns: Interceptors to use when invoking 'deleteNamespace'.
  func makeDeleteNamespaceInterceptors() -> [ClientInterceptor<V1_namespace, V1_Result>]

  /// - Returns: Interceptors to use when invoking 'createDeployment'.
  func makeCreateDeploymentInterceptors() -> [ClientInterceptor<V1_deployment, V1_Result>]

  /// - Returns: Interceptors to use when invoking 'readDeployment'.
  func makeReadDeploymentInterceptors() -> [ClientInterceptor<V1_namespace, V1_list_deployment>]

  /// - Returns: Interceptors to use when invoking 'updateDeployment'.
  func makeUpdateDeploymentInterceptors() -> [ClientInterceptor<V1_update_deployment, V1_Result>]

  /// - Returns: Interceptors to use when invoking 'deleteDeployment'.
  func makeDeleteDeploymentInterceptors() -> [ClientInterceptor<V1_delete_deployment, V1_Result>]
}

public final class V1_KubernetesClient: V1_KubernetesClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: V1_KubernetesClientInterceptorFactoryProtocol?

  /// Creates a client for the v1.Kubernetes service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: V1_KubernetesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol V1_KubernetesProvider: CallHandlerProvider {
  var interceptors: V1_KubernetesServerInterceptorFactoryProtocol? { get }

  /// Needs, Authorization
  func createNamespace(request: V1_namespace, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>

  /// Needs, Authorization
  func readNamespace(request: V1_Void, context: StatusOnlyCallContext) -> EventLoopFuture<V1_list_namespace>

  /// Needs, Authorization
  /// rpc UpdateNamespace(update_namespace) returns (Result);
  /// Needs, Authorization
  func deleteNamespace(request: V1_namespace, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>

  /// Needs, Authorization
  func createDeployment(request: V1_deployment, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>

  /// Needs, Authorization
  func readDeployment(request: V1_namespace, context: StatusOnlyCallContext) -> EventLoopFuture<V1_list_deployment>

  /// Needs, Authorization
  func updateDeployment(request: V1_update_deployment, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>

  /// Needs, Authorization
  func deleteDeployment(request: V1_delete_deployment, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>
}

extension V1_KubernetesProvider {
  public var serviceName: Substring { return "v1.Kubernetes" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateNamespace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_namespace>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeCreateNamespaceInterceptors() ?? [],
        userFunction: self.createNamespace(request:context:)
      )

    case "ReadNamespace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_Void>(),
        responseSerializer: ProtobufSerializer<V1_list_namespace>(),
        interceptors: self.interceptors?.makeReadNamespaceInterceptors() ?? [],
        userFunction: self.readNamespace(request:context:)
      )

    case "DeleteNamespace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_namespace>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeDeleteNamespaceInterceptors() ?? [],
        userFunction: self.deleteNamespace(request:context:)
      )

    case "CreateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_deployment>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeCreateDeploymentInterceptors() ?? [],
        userFunction: self.createDeployment(request:context:)
      )

    case "ReadDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_namespace>(),
        responseSerializer: ProtobufSerializer<V1_list_deployment>(),
        interceptors: self.interceptors?.makeReadDeploymentInterceptors() ?? [],
        userFunction: self.readDeployment(request:context:)
      )

    case "UpdateDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_update_deployment>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeUpdateDeploymentInterceptors() ?? [],
        userFunction: self.updateDeployment(request:context:)
      )

    case "DeleteDeployment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_delete_deployment>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeDeleteDeploymentInterceptors() ?? [],
        userFunction: self.deleteDeployment(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol V1_KubernetesServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createNamespace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateNamespaceInterceptors() -> [ServerInterceptor<V1_namespace, V1_Result>]

  /// - Returns: Interceptors to use when handling 'readNamespace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadNamespaceInterceptors() -> [ServerInterceptor<V1_Void, V1_list_namespace>]

  /// - Returns: Interceptors to use when handling 'deleteNamespace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteNamespaceInterceptors() -> [ServerInterceptor<V1_namespace, V1_Result>]

  /// - Returns: Interceptors to use when handling 'createDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateDeploymentInterceptors() -> [ServerInterceptor<V1_deployment, V1_Result>]

  /// - Returns: Interceptors to use when handling 'readDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadDeploymentInterceptors() -> [ServerInterceptor<V1_namespace, V1_list_deployment>]

  /// - Returns: Interceptors to use when handling 'updateDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateDeploymentInterceptors() -> [ServerInterceptor<V1_update_deployment, V1_Result>]

  /// - Returns: Interceptors to use when handling 'deleteDeployment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteDeploymentInterceptors() -> [ServerInterceptor<V1_delete_deployment, V1_Result>]
}
