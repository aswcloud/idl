//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: user.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `V1_UserAccountClient`, then call methods of this protocol to make API calls.
public protocol V1_UserAccountClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: V1_UserAccountClientInterceptorFactoryProtocol? { get }

  func createUser(
    _ request: V1_MakeUser,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_MakeUser, V1_Result>

  func readUser(
    _ request: V1_Uuid,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_Uuid, V1_UserDetail>

  func updateUser(
    _ request: V1_User,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_User, V1_Result>

  func deleteUser(
    _ request: V1_Uuid,
    callOptions: CallOptions?
  ) -> UnaryCall<V1_Uuid, V1_Result>
}

extension V1_UserAccountClientProtocol {
  public var serviceName: String {
    return "v1.UserAccount"
  }

  /// Unary call to CreateUser
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createUser(
    _ request: V1_MakeUser,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_MakeUser, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.UserAccount/CreateUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateUserInterceptors() ?? []
    )
  }

  /// Unary call to ReadUser
  ///
  /// - Parameters:
  ///   - request: Request to send to ReadUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func readUser(
    _ request: V1_Uuid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_Uuid, V1_UserDetail> {
    return self.makeUnaryCall(
      path: "/v1.UserAccount/ReadUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReadUserInterceptors() ?? []
    )
  }

  /// Unary call to UpdateUser
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateUser(
    _ request: V1_User,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_User, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.UserAccount/UpdateUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? []
    )
  }

  /// Unary call to DeleteUser
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteUser(
    _ request: V1_Uuid,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<V1_Uuid, V1_Result> {
    return self.makeUnaryCall(
      path: "/v1.UserAccount/DeleteUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteUserInterceptors() ?? []
    )
  }
}

public protocol V1_UserAccountClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createUser'.
  func makeCreateUserInterceptors() -> [ClientInterceptor<V1_MakeUser, V1_Result>]

  /// - Returns: Interceptors to use when invoking 'readUser'.
  func makeReadUserInterceptors() -> [ClientInterceptor<V1_Uuid, V1_UserDetail>]

  /// - Returns: Interceptors to use when invoking 'updateUser'.
  func makeUpdateUserInterceptors() -> [ClientInterceptor<V1_User, V1_Result>]

  /// - Returns: Interceptors to use when invoking 'deleteUser'.
  func makeDeleteUserInterceptors() -> [ClientInterceptor<V1_Uuid, V1_Result>]
}

public final class V1_UserAccountClient: V1_UserAccountClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: V1_UserAccountClientInterceptorFactoryProtocol?

  /// Creates a client for the v1.UserAccount service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: V1_UserAccountClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol V1_UserAccountProvider: CallHandlerProvider {
  var interceptors: V1_UserAccountServerInterceptorFactoryProtocol? { get }

  func createUser(request: V1_MakeUser, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>

  func readUser(request: V1_Uuid, context: StatusOnlyCallContext) -> EventLoopFuture<V1_UserDetail>

  func updateUser(request: V1_User, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>

  func deleteUser(request: V1_Uuid, context: StatusOnlyCallContext) -> EventLoopFuture<V1_Result>
}

extension V1_UserAccountProvider {
  public var serviceName: Substring { return "v1.UserAccount" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_MakeUser>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeCreateUserInterceptors() ?? [],
        userFunction: self.createUser(request:context:)
      )

    case "ReadUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_Uuid>(),
        responseSerializer: ProtobufSerializer<V1_UserDetail>(),
        interceptors: self.interceptors?.makeReadUserInterceptors() ?? [],
        userFunction: self.readUser(request:context:)
      )

    case "UpdateUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_User>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeUpdateUserInterceptors() ?? [],
        userFunction: self.updateUser(request:context:)
      )

    case "DeleteUser":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<V1_Uuid>(),
        responseSerializer: ProtobufSerializer<V1_Result>(),
        interceptors: self.interceptors?.makeDeleteUserInterceptors() ?? [],
        userFunction: self.deleteUser(request:context:)
      )

    default:
      return nil
    }
  }
}

public protocol V1_UserAccountServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateUserInterceptors() -> [ServerInterceptor<V1_MakeUser, V1_Result>]

  /// - Returns: Interceptors to use when handling 'readUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReadUserInterceptors() -> [ServerInterceptor<V1_Uuid, V1_UserDetail>]

  /// - Returns: Interceptors to use when handling 'updateUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateUserInterceptors() -> [ServerInterceptor<V1_User, V1_Result>]

  /// - Returns: Interceptors to use when handling 'deleteUser'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteUserInterceptors() -> [ServerInterceptor<V1_Uuid, V1_Result>]
}
